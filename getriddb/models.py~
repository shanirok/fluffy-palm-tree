# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from __future__ import unicode_literals

from django.db import models
from enum import Enum

#class pusize(Enum):
#    Small    =  0
#    Medium   =  1
#    Large    =  2 

class Customerbase(models.Model):
    id = models.PositiveIntegerField(primary_key=True,  unique=True)
    customername = models.CharField(max_length=200, blank=True, default='')
    customeremail = models.CharField(max_length=200, blank=True, default='')
    customerphone = models.CharField(max_length=200, blank=True, default='')
    customeraddress = models.CharField(max_length=200, blank=True, default='')

    class Meta:
#        managed = False
        db_table = 'customerbase'

class Pickuplist(models.Model):
    id = models.PositiveIntegerField(primary_key=True, unique=True)
    pickupdate = models.DateField(blank=True, null=True)
    pickupsize = models.CharField(max_length=200, blank=True, default='')
    pickupprice = models.IntegerField(blank=True, null=True)
    customer = models.ForeignKey(Customerbase)

    class Meta:
#        managed = False
        db_table = 'pickuplist'

class Inventory(models.Model):
    id = models.PositiveIntegerField(primary_key=True, unique=True)
    indate = models.DateField(blank=True, null=True)
    pickup = models.ForeignKey(Pickuplist)
    category = models.CharField(max_length=200, blank=True, default='')
    segment = models.CharField(max_length=200, blank=True, default='')
    itemtype = models.CharField(max_length=200, blank=True, default='')
    brand = models.CharField(max_length=200, blank=True, default='')
    size = models.CharField(max_length=200, blank=True, default='')
    color = models.CharField(max_length=200, blank=True, default='')
    firstassessment = models.CharField(max_length=200, blank=True, default='')
    donationvalue = models.FloatField(blank=True, null=True)
    condition = models.CharField(max_length=200, blank=True, default='')
    cut = models.CharField(max_length=200, blank=True, default='')
    style = models.CharField(max_length=200, blank=True, default='')
    fabric = models.CharField(max_length=200, blank=True, default='')
    usecase = models.CharField(max_length=200, blank=True, default='')
    postprice = models.FloatField(blank=True, null=True)
    origprice = models.FloatField(blank=True, null=True)
    status = models.CharField(max_length=200, blank=True, default='')
    statuschangedate = models.DateField(blank=True, null=True)
    location = models.CharField(max_length=200, blank=True, default='')

    class Meta:
#        managed = False
        db_table = 'inventory'
